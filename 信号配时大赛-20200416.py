# -*- coding: utf-8 -*-
"""
Created on Thu Apr 16 14:48:13 2020
信号配时打算
@author: 18120900
"""

# %%
'''
聚类分析模块--工作日
'''
import numpy as np
from sklearn.cluster import KMeans

t0 = [0.11, 0.08, 0.24, 0.13, 0.08, 0.23, 0.12, 0.09, 0.23, 0.12, 0.09, 0.22]
t1 = [0.05, 0.04, 0.13, 0.06, 0.03, 0.11, 0.05, 0.04, 0.11, 0.06, 0.04, 0.11]
t2 = [0.03, 0.02, 0.07, 0.03, 0.02, 0.05, 0.02, 0.02, 0.05, 0.03, 0.02, 0.06]
t3 = [0.01, 0.01, 0.02, 0.01, 0.00, 0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.02]
t4 = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
t5 = [0.01, 0.01, 0.03, 0.02, 0.01, 0.03, 0.01, 0.01, 0.03, 0.02, 0.01, 0.03]
t6 = [0.11, 0.08, 0.22, 0.17, 0.12, 0.25, 0.17, 0.14, 0.23, 0.12, 0.09, 0.18]
t7 = [0.45, 0.38, 0.56, 0.62, 0.55, 0.60, 0.62, 0.61, 0.54, 0.46, 0.40, 0.44]
t8 = [0.72, 0.64, 0.84, 0.90, 0.84, 0.85, 0.95, 0.94, 0.83, 0.82, 0.71, 0.77]
t9 = [0.73, 0.65, 0.95, 0.91, 0.83, 1.00, 1.00, 0.96, 1.00, 0.98, 0.85, 1.00]
t10 = [0.71, 0.62, 0.93, 0.82, 0.76, 0.92, 0.78, 0.74, 0.87, 0.83, 0.71, 0.91]
t11 = [0.60, 0.51, 0.85, 0.74, 0.68, 0.81, 0.57, 0.52, 0.72, 0.62, 0.54, 0.75]
t12 = [0.55, 0.45, 0.82, 0.63, 0.53, 0.77, 0.49, 0.42, 0.66, 0.57, 0.48, 0.72]
t13 = [0.64, 0.52, 0.94, 0.79, 0.66, 0.91, 0.61, 0.55, 0.77, 0.63, 0.51, 0.80]
t14 = [0.72, 0.63, 0.93, 0.84, 0.77, 0.92, 0.67, 0.65, 0.78, 0.68, 0.60, 0.80]
t15 = [0.73, 0.63, 0.91, 0.74, 0.67, 0.82, 0.65, 0.62, 0.73, 0.70, 0.61, 0.77]
t16 = [0.75, 0.67, 0.90, 0.72, 0.68, 0.77, 0.64, 0.61, 0.73, 0.77, 0.70, 0.79]
t17 = [0.90, 0.86, 0.90, 0.96, 0.99, 0.80, 0.83, 0.86, 0.73, 0.90, 0.88, 0.76]
t18 = [1.00, 1.00, 1.00, 1.00, 1.00, 0.88, 0.92, 1.00, 0.79, 1.00, 1.00, 0.85]
t19 = [0.82, 0.80, 0.99, 0.78, 0.77, 0.82, 0.68, 0.68, 0.75, 0.78, 0.81, 0.81]
t20 = [0.65, 0.57, 0.90, 0.65, 0.57, 0.80, 0.56, 0.52, 0.72, 0.63, 0.57, 0.74]
t21 = [0.56, 0.47, 0.85, 0.61, 0.50, 0.80, 0.58, 0.52, 0.78, 0.53, 0.44, 0.71]
t22 = [0.39, 0.30, 0.71, 0.51, 0.38, 0.72, 0.51, 0.43, 0.73, 0.44, 0.35, 0.63]
t23 = [0.24, 0.18, 0.49, 0.30, 0.20, 0.47, 0.29, 0.23, 0.48, 0.27, 0.21, 0.42]

X = np.array([t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14,
              t15, t16, t17, t18, t19, t20, t21, t22, t23, t0])
kmeans = KMeans(n_clusters=6).fit(X)
pred = kmeans.predict(X)
print(pred)

# %%
'''
聚类分析模块--休息日
'''
import numpy as np
from sklearn.cluster import KMeans

t0 = [0.18, 0.15, 0.28, 0.16, 0.12, 0.26, 0.18, 0.15, 0.29, 0.20, 0.17, 0.30]
t1 = [0.10, 0.09, 0.17, 0.09, 0.06, 0.15, 0.10, 0.09, 0.17, 0.12, 0.11, 0.18]
t2 = [0.06, 0.05, 0.09, 0.05, 0.03, 0.08, 0.05, 0.05, 0.09, 0.06, 0.06, 0.09]
t3 = [0.02, 0.02, 0.04, 0.02, 0.00, 0.03, 0.02, 0.02, 0.03, 0.03, 0.03, 0.04]
t4 = [0.00, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.02, 0.01]
t5 = [0.00, 0.00, 0.00, 0.00, 0.00, 0.01, 0.00, 0.01, 0.00, 0.00, 0.00, 0.00]
t6 = [0.03, 0.04, 0.05, 0.03, 0.02, 0.07, 0.03, 0.03, 0.05, 0.03, 0.02, 0.05]
t7 = [0.16, 0.15, 0.28, 0.17, 0.14, 0.29, 0.19, 0.18, 0.30, 0.15, 0.13, 0.26]
t8 = [0.42, 0.39, 0.60, 0.41, 0.34, 0.60, 0.46, 0.44, 0.64, 0.41, 0.36, 0.58]
t9 = [0.53, 0.51, 0.71, 0.49, 0.45, 0.66, 0.51, 0.48, 0.68, 0.52, 0.47, 0.71]
t10 = [0.68, 0.66, 0.82, 0.58, 0.53, 0.74, 0.62, 0.60, 0.78, 0.65, 0.60, 0.80]
t11 = [0.73, 0.67, 0.86, 0.66, 0.59, 0.80, 0.66, 0.61, 0.83, 0.71, 0.66, 0.84]
t12 = [0.77, 0.71, 0.86, 0.67, 0.62, 0.78, 0.64, 0.58, 0.80, 0.70, 0.65, 0.83]
t13 = [0.83, 0.78, 0.92, 0.69, 0.62, 0.85, 0.73, 0.67, 0.86, 0.76, 0.70, 0.91]
t14 = [0.87, 0.82, 0.97, 0.74, 0.70, 0.86, 0.80, 0.74, 0.90, 0.81, 0.75, 0.95]
t15 = [0.85, 0.80, 0.94, 0.76, 0.72, 0.87, 0.81, 0.79, 0.90, 0.79, 0.78, 0.90]
t16 = [0.89, 0.85, 0.94, 0.79, 0.81, 0.84, 0.86, 0.84, 0.94, 0.83, 0.83, 0.91]
t17 = [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00]
t18 = [0.87, 0.87, 0.94, 0.84, 0.83, 0.93, 0.87, 0.87, 0.93, 0.85, 0.87, 0.92]
t19 = [0.62, 0.61, 0.75, 0.52, 0.51, 0.70, 0.57, 0.56, 0.71, 0.58, 0.61, 0.71]
t20 = [0.57, 0.55, 0.69, 0.48, 0.44, 0.64, 0.52, 0.50, 0.67, 0.55, 0.55, 0.68]
t21 = [0.49, 0.47, 0.64, 0.44, 0.41, 0.63, 0.49, 0.47, 0.65, 0.49, 0.46, 0.65]
t22 = [0.38, 0.35, 0.54, 0.34, 0.30, 0.51, 0.37, 0.34, 0.53, 0.40, 0.36, 0.56]
t23 = [0.22, 0.19, 0.34, 0.19, 0.15, 0.30, 0.18, 0.16, 0.31, 0.23, 0.21, 0.34]

X = np.array([t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14,
              t15, t16, t17, t18, t19, t20, t21, t22, t23, t0])
result = []
for i in range(10):
    kmeans = KMeans(n_clusters=6).fit(X)
    result.append(kmeans.predict(X).tolist())
print(result)

# %%
'''
时段划分模块
'''
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


def cosine_similarity(x, y, norm=False):
    """ 计算两个向量x和y的余弦相似度 """
    assert len(x) == len(y), "len(x) != len(y)"
    if np.all(x == 0) or np.all(y == 0):
        return float(1) if x == y else float(0)

    # method 1
    res = np.array([[x[i] * y[i], x[i] * x[i], y[i] * y[i]] for i in range(len(x))])
    cos = sum(res[:, 0]) / (np.sqrt(sum(res[:, 1])) * np.sqrt(sum(res[:, 2])))
    return 0.5 * cos + 0.5 if norm else cos  # 归一化到[0, 1]区间内


if __name__ == '__main__':
    data = pd.read_csv(r"F:\18120900\桌面\初赛参赛材料\子区时段划分\矩阵表.csv")
    title = data.columns.values.tolist()
    data = np.array(data)
    result = []
    for c1 in range(21):
        temp = []
        for c2 in range(21):
            temp.append(cosine_similarity(data[:, c1], data[:, c2]))
        result.append(temp)
    df = pd.DataFrame(columns=title, data=result, index=title)
    sns.heatmap(df, cmap='coolwarm')
    plt.show()
# %%
